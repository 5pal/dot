return {}
-- @diagnostic disable::on("confirm_done", cmp_autopairs.on_confirm_done())
--
--       -- Load snippets
--       require("luasnip.loaders.from_vscode").lazy_load()
--
--       cmp.setup({
--         snippet = {
--           expand = function(args)
--             luasnip.lsp_expand(args.body)
--           end,
--         },
--         window = {
--           completion = cmp.config.window.bordered(),
--           documentation = cmp.config.window.bordered(),
--         },
--         completion = { completeopt = "menu,noselect,menuone,noinsert" },
--         preselect = cmp.PreselectMode.None,
--         mapping = cmp.mapping.preset.insert({
--           ["<C-p>"] = cmp.mapping.select_prev_item(), -- previous suggestion
--           ["<C-n>"] = cmp.mapping.select_next_item(), -- next suggestion
--           ["<Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--               cmp.select_next_item()
--             elseif luasnip.expand_or_jumpable() then
--               luasnip.expand_or_jump()
--             else
--               fallback()
--             end
--           end, { "i", "s" }),
--           ["<S-Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--               cmp.select_prev_item()
--             elseif luasnip.jumpable(-1) then
--               luasnip.jump(-1)
--             else
--               fallback()
--             end
--           end, { "i", "s" }),
--           ["<C-u>"] = cmp.mapping.scroll_docs(-4), -- scroll up preview
--           ["<C-d>"] = cmp.mapping.scroll_docs(4), -- scroll down preview
--           ["<C-Space>"] = cmp.mapping.complete({}), -- show completion suggestions
--           ["<C-c>"] = cmp.mapping.abort(), -- close completion window
--           ["<CR>"] = cmp.mapping.confirm({ select = false }), -- select suggestion
--         }),
--         -- sources for autocompletion
--         sources = cmp.config.sources({
--           {
--             name = "nvim_lsp",
--             entry_filter = function(entry)
--               local kind = require("cmp.types").lsp.CompletionItemKind[entry:get_kind()]
--               return kind ~= "Text" -- "Text" 타입은 제외
--             end,
--           },
--           { name = "buffer" },
--           { name = "path" },
--           -- { name = "nvim_lua" },
--           { name = "luasnip" },
--           -- { name = "calc" },
--           { name = "emoji" },
--           { name = "nvim-lsp-signature-help" },
--         }),
--         -- Enable pictogram icons for lsp/autocompletion
--         formatting = {
--           -- fields = {},
--           expandable_indicator = true,
--           format = function(entry, item)
--             local color_item = require("nvim-highlight-colors").format(entry, { kind = item.kind })
--             item = lspkind.cmp_format({
--               mode = "symbol_text",
--               maxwidth = 50,
--               ellipsis_char = "...",
--               menu = {
--                 nvim_lsp = "[LSP]",
--                 buffer = "[Buffer]",
--                 path = "[Path]",
--                 luasnip = "[Snippet]",
--                 nvim_lsp_signature_help = "[Signature]",
--               },
--             })(entry, item)
--             if color_item.abbr_hl_group then
--               item.kind_hl_group = color_item.abbr_hl_group
--               item.kind = color_item.abbr
--             end
--             return item
--           end,
--         },
--         experimental = {
--           ghost_text = true,
--         },
--       })
--     end,
--   },
-- }
